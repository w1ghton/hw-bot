from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from app.database.requests import *
import app.keyboards as kb


router = Router()
global obj_call
obj_call = dict()


class GetClass(StatesGroup):
    user_class = State()


class GetHomeWork(StatesGroup):
    hw = State()


@router.message(CommandStart())
async def first(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    """
    create()
    await state.set_state(GetClass.user_class)
    await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å:")


@router.message(GetClass.user_class)
async def second(message: Message, state: FSMContext) -> None:
    """
    –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –∫–ª–∞—Å—Å
    """
    user_class = message.text.lower()

    if len(user_class) > 3:
        await state.set_state(GetClass.user_class)
        await message.reply(
            "–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∫–ª–∞—Å—Å –µ—â–µ —Ä–∞–∑:"
        )
    else:
        await state.update_data(user_class=user_class)
        add_user(message.from_user.id, user_class)
        add_class(user_class)
        await state.clear()
        await warning(message)


@router.message(Command("objects"))
async def objects(message: Message) -> None:
    """
    –ú–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    """
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ", reply_markup=await kb.kb_objects())


@router.callback_query(F.data == "cancel")
async def cancel(callback: CallbackQuery) -> None:
    """
    –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    """
    await callback.answer()
    try:
        await callback.message.edit_text(
            text="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç: ", reply_markup=await kb.kb_objects()
        )
    except:
        await callback.message.delete()


@router.callback_query(F.data == "add_hw")
async def add_hw_first(callback: CallbackQuery, state: FSMContext) -> None:
    """
    –î–æ–±–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    """
    await state.set_state(GetHomeWork.hw)
    await callback.answer()
    await callback.message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º: ")


@router.message(F.photo, GetHomeWork.hw)
async def add_photo_second(message: Message, state: FSMContext) -> None:
    photo = message.photo[-1]
    hw = photo.file_id
    await state.clear()
    add_hw(message.from_user.id, obj_call[message.from_user.id], hw)
    await message.reply("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    await objects(message)


@router.message(GetHomeWork.hw)
async def add_text_second(message: Message, state: FSMContext) -> None:
    hw = message.text
    await state.clear()
    add_hw(message.from_user.id, obj_call[message.from_user.id], hw)
    await message.reply("–î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    await objects(message)


@router.callback_query(F.data)
async def object_manage(callback: CallbackQuery) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    """
    await callback.answer()
    global obj_call
    obj_call.update({callback.message.chat.id: callback.data})
    print(get_hw(callback.message.chat.id, obj_call[callback.message.chat.id]))
    try:
        await callback.message.answer_photo(
            get_hw(callback.message.chat.id, obj_call[callback.message.chat.id]),
            reply_markup=kb.kb_object,
        )
    except:
        await callback.message.edit_text(
            get_hw(callback.message.chat.id, obj_call[callback.message.chat.id]),
            reply_markup=kb.kb_object,
        )


@router.message(Command("info"))
async def get_help(message: Message) -> None:
    """
    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    """
    await message.answer(
        '–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –±–æ—Ç–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ –ª–∏—Ü–µ–Ω–∑–∏–∏ <a href="https://opensource.org/license/mit">MIT</a> –∏ '
        '–Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ <a href="https://github.com/w1ghton/hw-bot.git">GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏</a>.\n–î–ª—è —Å–≤—è–∑–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '
        "–∫–æ–º–∞–Ω–¥—É /contact."
    )


@router.message(Command("warning"))
async def warning(message: Message):
    await message.answer(
        "–ò–∑-–∑–∞ —Ç–æ–≥–æ, —á—Ç–æ –±–æ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ñ–∞–π–ª—ã –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, "
        "—Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç (–∏ –≤—Å—è–∫–∏–µ —Å–º–∞–π–ª–∏–∫–∏ ü§Øü§†ü§Æ)"
    )
    await message.answer_sticker(
        "CAACAgIAAxkBAAEFWBRmP8PR-jMDPavWlkzKIWMc90GIqQACw0MAAoPlOEgAAevDj6k329Q1BA"
    )
    await objects(message)
